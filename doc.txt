функциональный дефект – это дефект, связанный с нарушением работы программного продукта. Он может быть связан с логикой самого приложения, отдельной функции или системы в целом.

В зависимости от цели, функциональное тестирование может проводиться:

основываясь на функциональных требованиях спецификации. Для полного покрытия тестами всего функционала описываются тестовые случаи (testcases). При этом обязательно учитывается приоритет функций. Такой подход позволяет проверить работу системы при позитивных и негативных сценариях: ввод валидных и невалидных данных, различные комбинации действий и т.д.
основываясь на бизнес-процессах, для проведения которых предназначено приложение. Важно, чтобы функционал системы обеспечивал правильность выполнения операций с точки зрения сценариев использования системы (usecases).
Тестировщику приходится работать с большим объемом информации, выбирать из множества вариантов решения задач и изобретать новые. В процессе этой деятельности тяжело удержать и структурировать в голове все проверки. Потому для эффективного нахождения функциональных багов и наиболее полного покрытия тестами далее сформулируем несколько советов.

К тестированию можно приступать уже с момента появления первых требований. Здесь уместно составление стратегии тестирования, написание чек-листов, тест-кейсов и т.д. Зачастую это помогает устранять большое количество неточностей, готовить тестовое окружение.
Проверки в чек-листе лучше всего группировать относительно логики работы приложения, по функциональным модулям системы. Структуру списка проверок лучше всего сделать многоуровневой, это позволяет отразить иерархию функций. Так вероятность пропустить баг гораздо меньше. Чек-лист должен быть полным, но не избыточным. Не допускайте дублирования (часто появляется из-за разных формулировок одной и той же идеи).
Приступая к составлению чек-листа, задайте себе следующие вопросы:
Что предстоит тестировать?
Необходимо понимать какая это система: четко знать требования к её работе и целевое назначение.
Кем будет конечный пользователь?
Ответ обеспечивает понимание и планирование характерных сценариев использования системы.
Как обычно используется система?
Лучше всего разделить основные задачи на более мелкие подзадачи для составления проверок позитивного тестирования.
Как сломать продукт?
Тоже декомпозиция основных задач, но с целью негативного тестирования.
Систему со сложной структурой и логикой работы подвергайте функциональной декомпозиции. Разбейте её на простые подзадачи, которые будут более лёгкими для запоминания, чтобы без труда удержать в голове всю информацию об объекте тестирования.
По мере составления стратегии тестирования отмечайте неточности. Накопившиеся вопросы необходимо уточнить и обратиться к тому, кто может предоставить ответы.
Сначала проводите позитивные проверки самых важных функциональных модулей. Постепенно повышая сложность проверок можно переходить к негативным кейсам.
Применение техник классов эквивалентности и граничных условий поможет избежать дублирования тестов.
Допускается объединение позитивных проверок, но объединение негативных тест-кейсов почти всегда запрещено.
Поиск путей для оптимизации изначальной стратегии тестирования поможет снизить трудозатраты на её проведение.
Опираясь на эти правила разберём небольшую часть чек-листа тестирования функционала. Проверим модуль регистрации на сайте.